# Langfuse Prompt Manager Frontend - Cursor AI Rules

## Project Overview
This is a React-based frontend application for managing prompts through the Langfuse API. The application provides a user interface for browsing, searching, and managing prompts with tag-based filtering capabilities.

## Tech Stack
- **Framework**: React 19.1.1
- **Build Tool**: Create React App (react-scripts 5.0.1)
- **API Client**: Langfuse SDK 3.38.4
- **HTTP Client**: Axios 1.11.0
- **Testing**: Jest, React Testing Library
- **Language**: JavaScript (ES6+)

## Project Structure
```
langfuse-frontend/
├── public/           # Static assets
├── src/
│   ├── App.js       # Main application component with state management
│   ├── App.css      # Application styles
│   ├── PromptList.js # Component for displaying prompts
│   ├── TagFilter.js  # Component for tag filtering functionality
│   ├── langfuse-client.js # Langfuse API integration layer
│   └── index.js     # Application entry point
```

## Core Features & Architecture

### 1. Prompt Management
- Display and search prompts from Langfuse API
- Tag-based filtering and organization
- Real-time search across prompt names and configurations
- Prompt versioning support

### 2. API Integration (langfuse-client.js)
- Centralized Langfuse API client configuration
- Methods: getPrompts(), getPrompt(), getTags(), deleteTag()
- Error handling with console logging
- Asynchronous operations with async/await

### 3. State Management
- React hooks (useState, useEffect) for local state
- Component-level state for prompts, tags, search, and loading
- Client-side filtering for search functionality

## Development Guidelines

### Code Style & Conventions
1. **Component Structure**:
   - Use functional components with hooks
   - Keep components focused and single-purpose
   - Separate API logic into dedicated client modules

2. **State Management**:
   - Use local state with useState for component-specific data
   - Implement useEffect for side effects and data fetching
   - Consider lifting state up when needed for shared data

3. **API Handling**:
   - Always use try-catch blocks for API calls
   - Provide user feedback for loading and error states
   - Log errors to console for debugging
   - Use confirmation dialogs for destructive actions

4. **Naming Conventions**:
   - Components: PascalCase (e.g., PromptList, TagFilter)
   - Functions: camelCase (e.g., fetchPrompts, handleSelectTag)
   - Event handlers: prefix with 'handle' (e.g., handleDeleteTag)
   - API functions: descriptive verbs (e.g., getPrompts, deleteTag)

### Security Considerations
- **API Keys**: Currently hardcoded in langfuse-client.js - should be moved to environment variables
- **Input Validation**: Implement proper validation for user inputs
- **XSS Prevention**: React handles this by default, but be careful with dangerouslySetInnerHTML
- **Error Messages**: Don't expose sensitive information in error messages to users

### Testing Strategy
- Unit tests for utility functions and API client methods
- Component testing with React Testing Library
- Integration tests for user workflows
- Mock API responses for consistent testing

### Performance Optimization
1. **Search Optimization**:
   - Currently uses client-side filtering
   - Consider debouncing search input for better performance
   - Implement pagination for large prompt lists

2. **API Calls**:
   - Minimize unnecessary API calls
   - Implement caching where appropriate
   - Use loading states to improve perceived performance

3. **Rendering**:
   - Use React.memo for expensive components
   - Implement virtualization for long lists
   - Optimize re-renders with proper dependency arrays

## Future Enhancements & Extensibility

### Planned Features
1. **n8n Integration**:
   - Webhook endpoints for n8n workflows
   - Automated prompt deployment through n8n agents
   - Workflow triggers based on prompt changes

2. **User Tracking & Analytics**:
   - User session tracking
   - Prompt usage analytics
   - Performance metrics collection
   - User behavior analysis

3. **History Management**:
   - Prompt version history
   - Change tracking and rollback
   - Audit logs for all operations
   - Diff visualization between versions

4. **Social Engagement**:
   - User comments on prompts
   - Rating and feedback system
   - Sharing and collaboration features
   - Team workspaces

### Architecture Recommendations
1. **State Management Evolution**:
   - Consider Redux or Zustand for complex state
   - Implement context API for global state
   - Add middleware for API call management

2. **Component Library**:
   - Build reusable UI components
   - Implement design system
   - Create component documentation

3. **API Layer Enhancement**:
   - Add request/response interceptors
   - Implement retry logic
   - Add request cancellation
   - Cache management layer

## Development Commands
```bash
# Install dependencies
npm install

# Start development server
npm start

# Run tests
npm test

# Build for production
npm run build

# Eject from Create React App (use with caution)
npm run eject
```

## Environment Variables
Create a `.env` file in the root directory:
```
REACT_APP_LANGFUSE_SECRET_KEY=your_secret_key
REACT_APP_LANGFUSE_PUBLIC_KEY=your_public_key
REACT_APP_LANGFUSE_BASE_URL=https://cloud.langfuse.com
```

## Best Practices for AI Assistance
1. **When modifying components**:
   - Maintain existing patterns and conventions
   - Update PropTypes or TypeScript interfaces if present
   - Ensure proper error boundaries

2. **When adding features**:
   - Create new components in separate files
   - Update imports and exports accordingly
   - Add appropriate loading and error states

3. **When fixing bugs**:
   - Check for similar patterns that might have the same issue
   - Add defensive programming practices
   - Include proper error handling

4. **When refactoring**:
   - Maintain backward compatibility
   - Update all dependent components
   - Preserve existing functionality

## Code Review Checklist
- [ ] Follows React best practices
- [ ] Proper error handling implemented
- [ ] Loading states for async operations
- [ ] Responsive design considerations
- [ ] Accessibility features included
- [ ] Performance optimizations applied
- [ ] Security best practices followed
- [ ] Code is properly commented where needed
- [ ] Tests written/updated for new features

## Dependencies to Watch
- Keep React and react-scripts updated
- Monitor Langfuse SDK for breaking changes
- Check for security vulnerabilities regularly
- Update testing libraries as needed

## Integration Points
1. **Langfuse API**: Main backend service for prompt management
2. **Future n8n**: Workflow automation and agent orchestration
3. **Future Analytics**: User tracking and engagement metrics
4. **Future Database**: Local caching and offline support

## Deployment Considerations
- Build optimization with npm run build
- Environment-specific configurations
- API endpoint configuration
- CORS settings for API calls
- Static hosting compatibility (Vercel, Netlify, etc.)